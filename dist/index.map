{"version":3,"sources":["index.js"],"names":["kebabCase","str","replace","toLowerCase","uniq","value","index","arr","lastIndexOf","isFn","isDef","Boolean","rid","Math","random","toString","substring","isEmpty","obj","Object","values","some","applyArgsToStyle","args","style","cs","classNames","filter","join","stylesheet","initSheet","document","createElement","head","appendChild","getSheet","sheet","parseRules","selector","wrapper","baseRule","otherRules","keys","forEach","prop","startsWith","push","test","space","rule","cssDeclaration","rules","cssRules","declaration","map","insertRule","className","length","identifier","Symbol","combine","defs","styles","css","extraStyles","cache","applyStyle","computedStyle","key","JSON","stringify","version","name","createStyled","render","Component","Styled","module","exports"],"mappings":"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","file":"index.map","sourceRoot":"..","sourcesContent":["// utils\n\nfunction kebabCase(str = '') {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase()\n}\n\nfunction uniq(value, index, arr) {\n  return arr.lastIndexOf(value) === index\n}\n\nfunction isFn(value) {\n  return typeof value === 'function'\n}\n\nfunction isDef(value) {\n  return value === 0 || Boolean(value)\n}\n\nfunction rid() {\n  const randomString = Math.random()\n    .toString(36)\n    .substring(7)\n\n  return 'sx-' + randomString\n}\n\nfunction isEmpty(obj) {\n  return !Object.values(obj).some(isDef)\n}\n\nfunction applyArgsToStyle(args, style) {\n  return isFn(style) ? style(...args) : style\n}\n\nfunction cs(...classNames) {\n  return classNames\n    .filter(isDef)\n    .filter(uniq)\n    .join(' ')\n}\n\n\n// rules\n\nlet stylesheet\n\nfunction initSheet() {\n  stylesheet = document.createElement('style')\n  document.head.appendChild(stylesheet)\n  return stylesheet\n}\n\nfunction getSheet() {\n  return !stylesheet || !stylesheet.sheet\n    ? initSheet().sheet\n    : stylesheet.sheet\n}\n\nfunction parseRules(selector, style, wrapper) {\n  const baseRule = [selector, {}, wrapper]\n  const otherRules = []\n\n  Object.keys(style).forEach(prop => {\n    const value = style[prop]\n\n    if (typeof value !== 'object') {\n      // flat values\n      baseRule[1][prop] = value\n    } else if (prop.startsWith('@')) {\n      // media queries\n      otherRules.push(...parseRules(selector, value, prop))\n    } else if (/^(:|>|\\.|\\*)/.test(prop)) {\n      // nested selector\n      const space = prop[0] === ':' ? '' : ' '\n      otherRules.push(...parseRules(selector + space + prop, value, wrapper))\n    }\n  })\n\n  return [baseRule, ...otherRules].filter(rule => !isEmpty(rule[1]))\n}\n\nfunction cssDeclaration(selector, rules, wrapper) {\n  const cssRules = Object.keys(rules)\n    .filter(prop => rules[prop])\n    .map(prop => `${kebabCase(prop)}: ${rules[prop]};`)\n\n  const declaration = `${selector} { ${cssRules.join(' ')} }`\n  return wrapper ? `${wrapper} { ${declaration} }` : declaration\n}\n\nfunction insertRule(className, style) {\n  const selector = `.${className}`\n  const sheet = getSheet()\n  const last = () => sheet.cssRules.length\n\n  parseRules(selector, style)\n    .map(rule => cssDeclaration(...rule))\n    .forEach(declaration => sheet.insertRule(declaration, last()))\n\n  return className\n}\n\n\n// css\n\nconst identifier = Symbol()\n\nfunction combine(...defs) {\n  const styles = defs.map(style => css(style))\n\n  if (!styles.some(isFn)) {\n    return cs(...styles)\n  }\n\n  const wrapper = (...args) =>\n    cs(...styles.map(style => applyArgsToStyle(args, style)))\n\n  wrapper.identifier = identifier\n  return wrapper\n}\n\nfunction css(style, ...extraStyles) {\n  const className = rid()\n\n  if (extraStyles.length > 0) {\n    return combine(style, ...extraStyles)\n  } else if (typeof style === 'string' || style.identifier === identifier) {\n    return style\n  } else if (!isFn(style)) {\n    return insertRule(className, style)\n  }\n\n  const cache = {}\n\n  const applyStyle = (...args) => {\n    const computedStyle = style(...args)\n    const key = JSON.stringify(computedStyle)\n\n    if (!cache[key]) {\n      const version = Object.keys(cache).length\n      const name = version > 0 ? `${className}-${version}` : className\n      cache[key] = insertRule(name, computedStyle)\n    }\n\n    return cache[key]\n  }\n\n  applyStyle.identifier = identifier\n  applyStyle({}) // create default style with no params\n  return applyStyle\n}\n\n\n// create styled\n\nfunction createStyled(render) {\n  return function styled(Component) {\n    return (...defs) => {\n      const className = rid()\n      const styles = css(className, ...defs)\n\n      const Styled = (...args) =>\n        render(\n          Component,\n          applyArgsToStyle(args, styles),\n          ...args\n        )\n\n      Styled.toString = () => className\n      return Styled\n    }\n  }\n}\n\nmodule.exports = { createStyled, css, cs }\n"]}